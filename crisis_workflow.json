{
  "nodes": [
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "a0411698-61fd-4e64-b3ed-edb8e9d2c752",
      "name": "Merge LLM Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        6480,
        17088
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "id": "33aaa137-5c4c-44da-8e02-4694188d29aa",
      "name": "Every 3 Minutes2",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        3936,
        17456
      ]
    },
    {
      "parameters": {
        "url": "http://feeds.bbci.co.uk/news/world/rss.xml",
        "options": {}
      },
      "id": "70f9e54d-c855-46c9-8d5b-7e2cb0b8f0ad",
      "name": "RSS BBC2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5136,
        16656
      ]
    },
    {
      "parameters": {
        "url": "https://www.aljazeera.com/xml/rss/all.xml",
        "options": {}
      },
      "id": "742a3ba9-dbac-4e8d-8b7e-d76f5e2ec359",
      "name": "RSS Al Jazeera2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5136,
        16848
      ]
    },
    {
      "parameters": {
        "url": "http://rss.cnn.com/rss/edition_world.rss",
        "options": {}
      },
      "id": "4d76d2c8-da86-4073-8c7d-d77a3a5d984f",
      "name": "RSS CNN2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5136,
        17040
      ]
    },
    {
      "parameters": {
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.atom",
        "options": {}
      },
      "id": "31b0b306-5ea9-4985-a548-cc14f7b2d194",
      "name": "USGS Earthquakes2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        4736,
        17280
      ]
    },
    {
      "parameters": {
        "url": "https://reliefweb.int/updates/rss.xml",
        "options": {}
      },
      "id": "846e1e0c-3824-4f6d-a029-c7bc694b3df3",
      "name": "RSS ReliefWeb2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        4752,
        17456
      ]
    },
    {
      "parameters": {
        "url": "https://www.cnbc.com/id/100003114/device/rss/rss.html",
        "options": {}
      },
      "id": "9ed1133f-3b1a-4749-bad1-0dcbb7ad323f",
      "name": "RSS CNBC Finance2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        4768,
        17648
      ]
    },
    {
      "parameters": {
        "url": "https://www.spc.noaa.gov/products/spcrss.xml",
        "options": {}
      },
      "id": "eabf1f5b-3660-4081-8965-017a42a87948",
      "name": "NOAA Weather2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5200,
        17936
      ]
    },
    {
      "parameters": {
        "url": "https://www.unocha.org/rss.xml",
        "options": {}
      },
      "id": "dc742a48-cefd-475d-b415-fc4375d915d7",
      "name": "UN OCHA2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5200,
        18144
      ]
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=crisis+OR+disaster+OR+earthquake+OR+emergency",
        "options": {}
      },
      "id": "f99a4c1b-b14c-42de-8514-173b8612c92b",
      "name": "Google News Crisis2",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        5184,
        18352
      ]
    },
    {
      "parameters": {
        "jsCode": "// Keyword-based categorization\nconst categories = {\n  'natural_disaster': ['earthquake', 'tsunami', 'hurricane', 'cyclone', 'typhoon', 'tornado', 'flood', 'landslide', 'volcano', 'eruption', 'avalanche'],\n  'fire': ['wildfire', 'fire', 'blaze', 'inferno', 'flames'],\n  'climate': ['climate', 'drought', 'heatwave', 'temperature', 'warming', 'carbon', 'emission'],\n  'finance': ['market', 'stock', 'financial', 'economy', 'recession', 'inflation', 'crisis', 'bank', 'debt'],\n  'conflict': ['war', 'conflict', 'attack', 'terrorism', 'violence', 'shooting', 'bombing'],\n  'health': ['pandemic', 'epidemic', 'outbreak', 'infection', 'disease', 'health crisis', 'virus'],\n  'humanitarian': ['refugee', 'displacement', 'migration', 'humanitarian', 'relief', 'aid', 'poverty', 'famine']\n};\n\n// Keywords that indicate it's crisis-worthy\nconst crisisKeywords = [\n  'earthquake', 'tsunami', 'hurricane', 'cyclone', 'typhoon', 'tornado', 'flood', 'landslide',\n  'wildfire', 'volcano', 'eruption', 'disaster', 'crisis', 'emergency', 'evacuation',\n  'attack', 'conflict', 'war', 'violence', 'terrorism', 'pandemic', 'epidemic', 'outbreak',\n  'humanitarian', 'refugee', 'displacement', 'financial crisis', 'market crash'\n];\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const json = item.json;\n  const title = (json.title || '').toLowerCase();\n  const description = (json.content || json.description || json.summary || '').toLowerCase();\n  const fullText = title + ' ' + description;\n  \n  // Check if it contains crisis keywords\n  const isCrisis = crisisKeywords.some(keyword => fullText.includes(keyword));\n  \n  if (!isCrisis) continue;\n  \n  // Determine category\n  let category = 'other';\n  let maxMatches = 0;\n  \n  for (const [cat, keywords] of Object.entries(categories)) {\n    const matches = keywords.filter(kw => fullText.includes(kw)).length;\n    if (matches > maxMatches) {\n      maxMatches = matches;\n      category = cat;\n    }\n  }\n  \n  results.push({\n    json: {\n      title: json.title,\n      description: json.content || json.description || json.summary || '',\n      link: json.link || json.guid,\n      source: (json.meta && json.meta.title) || json.creator || 'Unknown',\n      pubDate: json.pubDate || json.isoDate || new Date().toISOString(),\n      category: category,\n      rawText: fullText.substring(0, 500) // For LLM processing\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "f39b80c6-3e6f-48e9-8e7e-604b843167ed",
      "name": "Filter & Categorize2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5584,
        17088
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create unique hash for deduplication\nfunction createHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash).toString(36);\n}\n\nfunction normalizeUrl(url) {\n  try {\n    const u = new URL(url);\n    u.search = '';\n    u.hash = '';\n    return u.toString().replace(/\\/$/, '');\n  } catch {\n    return url.trim();\n  }\n}\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const json = item.json;\n  const normalizedLink = normalizeUrl(json.link || '');\n  const titleHash = createHash((json.title || '').toLowerCase());\n  \n  // Create unique identifier\n  const uniqueId = createHash(normalizedLink + titleHash);\n  \n  results.push({\n    json: {\n      ...json,\n      link: normalizedLink,\n      uniqueId: uniqueId,\n      titleHash: titleHash\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "7ab777ec-825c-472e-8f72-7eb0b669612e",
      "name": "Add Unique ID2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5808,
        17088
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for HTTP Request node\nconst results = [];\n\nfor (const item of $input.all()) {\n  const json = item.json;\n  const title = json.title || '';\n  const description = (json.description || json.rawText || '').substring(0, 500);\n  \n  results.push({\n    json: {\n      ...json,\n      llm_prompt: `Extract location from this news:\\n\\nTitle: ${title}\\n\\nDescription: ${description}`\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "31a46e41-4d14-4e86-9d6d-e035731d05b2",
      "name": "Prepare LLM Prompt1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6032,
        17088
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({\n  model: 'llama-3.1-8b-instant',\n  messages: [\n    {\n      role: 'system',\n      content: 'You are a location extraction expert. Extract ONLY the primary location (city and/or country) from the news. Return ONLY valid JSON: {\"location\": \"City, Country\" or \"Country\", \"confidence\": \"high\" or \"medium\" or \"low\"}. If no location, return {\"location\": \"Unknown\", \"confidence\": \"low\"}'\n    },\n    {\n      role: 'user',\n      content: $json.llm_prompt\n    }\n  ],\n  temperature: 0.1,\n  max_tokens: 100\n}) }}",
        "options": {}
      },
      "id": "af89e200-391b-451a-bff4-4c8b70dd89f2",
      "name": "Call Groq API1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6256,
        17296
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "Du3chguwIA6aAEpm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse LLM response and merge with original data\nconst mergedItems = $input.all();\n\nconst results = [];\n\nfor (const item of mergedItems) {\n  const json = item.json;\n  \n  // The merged data contains both original fields and API response\n  let llm_location = 'Unknown';\n  let llm_confidence = 'low';\n  \n  try {\n    // Check if this item has the API response (from input 1 of merge)\n    if (json.choices && json.choices[0]) {\n      const content = json.choices[0].message.content.trim();\n      console.log('LLM Response:', content);\n      \n      try {\n        const locationData = JSON.parse(content);\n        llm_location = locationData.location || 'Unknown';\n        llm_confidence = locationData.confidence || 'low';\n      } catch (parseError) {\n        // Try to extract from non-JSON response\n        const locationMatch = content.match(/location[\"']?\\s*:\\s*[\"']([^\"']+)[\"']/i);\n        if (locationMatch) {\n          llm_location = locationMatch[1];\n        }\n      }\n    }\n  } catch (error) {\n    console.log('Error parsing LLM response:', error.message);\n  }\n  \n  console.log(`Extracted: \"${llm_location}\" (${llm_confidence}) for: ${(json.title || '').substring(0, 50)}`);\n  \n  // The merge node combines fields, so we add location to existing data\n  results.push({\n    json: {\n      uniqueId: json.uniqueId,\n      titleHash: json.titleHash,\n      title: json.title,\n      description: json.description,\n      link: json.link,\n      source: json.source,\n      category: json.category,\n      pubDate: json.pubDate,\n      rawText: json.rawText,\n      llm_location: llm_location,\n      llm_confidence: llm_confidence\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "25334e41-a9ed-441e-818d-a2eca95e060c",
      "name": "Parse LLM Response1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6704,
        17088
      ]
    },
    {
      "parameters": {
        "jsCode": "// Multi-level geocoding with cache\nconst locationCache = {\n  // North America\n  'USA': { lat: 37.0902, lng: -95.7129 },\n  'United States': { lat: 37.0902, lng: -95.7129 },\n  'US': { lat: 37.0902, lng: -95.7129 },\n  'Canada': { lat: 56.1304, lng: -106.3468 },\n  'Mexico': { lat: 23.6345, lng: -102.5528 },\n  'Cuba': { lat: 21.5218, lng: -77.7812 },\n  'Jamaica': { lat: 18.1096, lng: -77.2975 },\n  'Haiti': { lat: 18.9712, lng: -72.2852 },\n  'Dominican Republic': { lat: 18.7357, lng: -70.1627 },\n  'Puerto Rico': { lat: 18.2208, lng: -66.5901 },\n  'Guatemala': { lat: 15.7835, lng: -90.2308 },\n  'Honduras': { lat: 15.2000, lng: -86.2419 },\n  'Nicaragua': { lat: 12.8654, lng: -85.2072 },\n  'Costa Rica': { lat: 9.7489, lng: -83.7534 },\n  'Panama': { lat: 8.5380, lng: -80.7821 },\n  \n  // South America\n  'Brazil': { lat: -14.2350, lng: -51.9253 },\n  'Argentina': { lat: -38.4161, lng: -63.6167 },\n  'Chile': { lat: -35.6751, lng: -71.5430 },\n  'Colombia': { lat: 4.5709, lng: -74.2973 },\n  'Peru': { lat: -9.1900, lng: -75.0152 },\n  'Venezuela': { lat: 6.4238, lng: -66.5897 },\n  'Ecuador': { lat: -1.8312, lng: -78.1834 },\n  'Bolivia': { lat: -16.2902, lng: -63.5887 },\n  'Paraguay': { lat: -23.4425, lng: -58.4438 },\n  'Uruguay': { lat: -32.5228, lng: -55.7658 },\n  'Guyana': { lat: 4.8604, lng: -58.9302 },\n  'Suriname': { lat: 3.9193, lng: -56.0278 },\n  \n  // Europe\n  'UK': { lat: 55.3781, lng: -3.4360 },\n  'United Kingdom': { lat: 55.3781, lng: -3.4360 },\n  'England': { lat: 52.3555, lng: -1.1743 },\n  'Scotland': { lat: 56.4907, lng: -4.2026 },\n  'Wales': { lat: 52.1307, lng: -3.7837 },\n  'Ireland': { lat: 53.4129, lng: -8.2439 },\n  'Northern Ireland': { lat: 54.7877, lng: -6.4923 },\n  'France': { lat: 46.2276, lng: 2.2137 },\n  'Germany': { lat: 51.1657, lng: 10.4515 },\n  'Italy': { lat: 41.8719, lng: 12.5674 },\n  'Spain': { lat: 40.4637, lng: -3.7492 },\n  'Portugal': { lat: 39.3999, lng: -8.2245 },\n  'Greece': { lat: 39.0742, lng: 21.8243 },\n  'Netherlands': { lat: 52.1326, lng: 5.2913 },\n  'Belgium': { lat: 50.5039, lng: 4.4699 },\n  'Switzerland': { lat: 46.8182, lng: 8.2275 },\n  'Austria': { lat: 47.5162, lng: 14.5501 },\n  'Poland': { lat: 51.9194, lng: 19.1451 },\n  'Czech Republic': { lat: 49.8175, lng: 15.4730 },\n  'Slovakia': { lat: 48.6690, lng: 19.6990 },\n  'Hungary': { lat: 47.1625, lng: 19.5033 },\n  'Romania': { lat: 45.9432, lng: 24.9668 },\n  'Bulgaria': { lat: 42.7339, lng: 25.4858 },\n  'Serbia': { lat: 44.0165, lng: 21.0059 },\n  'Croatia': { lat: 45.1, lng: 15.2 },\n  'Bosnia': { lat: 43.9159, lng: 17.6791 },\n  'Albania': { lat: 41.1533, lng: 20.1683 },\n  'North Macedonia': { lat: 41.6086, lng: 21.7453 },\n  'Slovenia': { lat: 46.1512, lng: 14.9955 },\n  'Montenegro': { lat: 42.7087, lng: 19.3744 },\n  'Sweden': { lat: 60.1282, lng: 18.6435 },\n  'Norway': { lat: 60.4720, lng: 8.4689 },\n  'Denmark': { lat: 56.2639, lng: 9.5018 },\n  'Finland': { lat: 61.9241, lng: 25.7482 },\n  'Iceland': { lat: 64.9631, lng: -19.0208 },\n  'Estonia': { lat: 58.5953, lng: 25.0136 },\n  'Latvia': { lat: 56.8796, lng: 24.6032 },\n  'Lithuania': { lat: 55.1694, lng: 23.8813 },\n  'Belarus': { lat: 53.7098, lng: 27.9534 },\n  'Moldova': { lat: 47.4116, lng: 28.3699 },\n  \n  // Asia\n  'China': { lat: 35.8617, lng: 104.1954 },\n  'India': { lat: 20.5937, lng: 78.9629 },\n  'Japan': { lat: 36.2048, lng: 138.2529 },\n  'South Korea': { lat: 35.9078, lng: 127.7669 },\n  'North Korea': { lat: 40.3399, lng: 127.5101 },\n  'Vietnam': { lat: 14.0583, lng: 108.2772 },\n  'Thailand': { lat: 15.8700, lng: 100.9925 },\n  'Myanmar': { lat: 21.9162, lng: 95.9560 },\n  'Burma': { lat: 21.9162, lng: 95.9560 },\n  'Cambodia': { lat: 12.5657, lng: 104.9910 },\n  'Laos': { lat: 19.8563, lng: 102.4955 },\n  'Malaysia': { lat: 4.2105, lng: 101.9758 },\n  'Singapore': { lat: 1.3521, lng: 103.8198 },\n  'Indonesia': { lat: -0.7893, lng: 113.9213 },\n  'Philippines': { lat: 12.8797, lng: 121.7740 },\n  'Bangladesh': { lat: 23.6850, lng: 90.3563 },\n  'Pakistan': { lat: 30.3753, lng: 69.3451 },\n  'Afghanistan': { lat: 33.9391, lng: 67.7100 },\n  'Nepal': { lat: 28.3949, lng: 84.1240 },\n  'Bhutan': { lat: 27.5142, lng: 90.4336 },\n  'Sri Lanka': { lat: 7.8731, lng: 80.7718 },\n  'Mongolia': { lat: 46.8625, lng: 103.8467 },\n  'Kazakhstan': { lat: 48.0196, lng: 66.9237 },\n  'Uzbekistan': { lat: 41.3775, lng: 64.5853 },\n  'Turkmenistan': { lat: 38.9697, lng: 59.5563 },\n  'Kyrgyzstan': { lat: 41.2044, lng: 74.7661 },\n  'Tajikistan': { lat: 38.8610, lng: 71.2761 },\n  'Taiwan': { lat: 23.6978, lng: 120.9605 },\n  'Hong Kong': { lat: 22.3193, lng: 114.1694 },\n  \n  // Middle East\n  'Turkey': { lat: 38.9637, lng: 35.2433 },\n  'Iran': { lat: 32.4279, lng: 53.6880 },\n  'Iraq': { lat: 33.2232, lng: 43.6793 },\n  'Syria': { lat: 34.8021, lng: 38.9968 },\n  'Lebanon': { lat: 33.8547, lng: 35.8623 },\n  'Jordan': { lat: 30.5852, lng: 36.2384 },\n  'Israel': { lat: 31.0461, lng: 34.8516 },\n  'Palestine': { lat: 31.9522, lng: 35.2332 },\n  'Gaza': { lat: 31.3547, lng: 34.3088 },\n  'West Bank': { lat: 31.9466, lng: 35.3027 },\n  'Saudi Arabia': { lat: 23.8859, lng: 45.0792 },\n  'Yemen': { lat: 15.5527, lng: 48.5164 },\n  'Oman': { lat: 21.4735, lng: 55.9754 },\n  'UAE': { lat: 23.4241, lng: 53.8478 },\n  'United Arab Emirates': { lat: 23.4241, lng: 53.8478 },\n  'Kuwait': { lat: 29.3117, lng: 47.4818 },\n  'Qatar': { lat: 25.3548, lng: 51.1839 },\n  'Bahrain': { lat: 26.0667, lng: 50.5577 },\n  \n  // Africa\n  'Egypt': { lat: 26.8206, lng: 30.8025 },\n  'South Africa': { lat: -30.5595, lng: 22.9375 },\n  'Nigeria': { lat: 9.0820, lng: 8.6753 },\n  'Kenya': { lat: -0.0236, lng: 37.9062 },\n  'Ethiopia': { lat: 9.1450, lng: 40.4897 },\n  'Tanzania': { lat: -6.3690, lng: 34.8888 },\n  'Uganda': { lat: 1.3733, lng: 32.2903 },\n  'Ghana': { lat: 7.9465, lng: -1.0232 },\n  'Morocco': { lat: 31.7917, lng: -7.0926 },\n  'Algeria': { lat: 28.0339, lng: 1.6596 },\n  'Tunisia': { lat: 33.8869, lng: 9.5375 },\n  'Libya': { lat: 26.3351, lng: 17.2283 },\n  'Sudan': { lat: 12.8628, lng: 30.2176 },\n  'South Sudan': { lat: 6.8770, lng: 31.3070 },\n  'Somalia': { lat: 5.1521, lng: 46.1996 },\n  'Zimbabwe': { lat: -19.0154, lng: 29.1549 },\n  'Mozambique': { lat: -18.6657, lng: 35.5296 },\n  'Angola': { lat: -11.2027, lng: 17.8739 },\n  'Namibia': { lat: -22.9576, lng: 18.4904 },\n  'Botswana': { lat: -22.3285, lng: 24.6849 },\n  'Zambia': { lat: -13.1339, lng: 27.8493 },\n  'Malawi': { lat: -13.2543, lng: 34.3015 },\n  'Rwanda': { lat: -1.9403, lng: 29.8739 },\n  'Burundi': { lat: -3.3731, lng: 29.9189 },\n  'Senegal': { lat: 14.4974, lng: -14.4524 },\n  'Mali': { lat: 17.5707, lng: -3.9962 },\n  'Ivory Coast': { lat: 7.5400, lng: -5.5471 },\n  'Cameroon': { lat: 7.3697, lng: 12.3547 },\n  'Congo': { lat: -4.0383, lng: 21.7587 },\n  'DRC': { lat: -4.0383, lng: 21.7587 },\n  \n  // Oceania\n  'Australia': { lat: -25.2744, lng: 133.7751 },\n  'New Zealand': { lat: -40.9006, lng: 174.8860 },\n  'Papua New Guinea': { lat: -6.3150, lng: 143.9555 },\n  'Fiji': { lat: -17.7134, lng: 178.0650 },\n  'Solomon Islands': { lat: -9.6457, lng: 160.1562 },\n  'Vanuatu': { lat: -15.3767, lng: 166.9592 },\n  'Samoa': { lat: -13.7590, lng: -172.1046 },\n  'Tonga': { lat: -21.1789, lng: -175.1982 },\n  \n  // Eastern Europe & Russia\n  'Russia': { lat: 61.524, lng: 105.3188 },\n  'Ukraine': { lat: 48.3794, lng: 31.1656 },\n  \n  // Fallback\n  'Unknown': { lat: 0, lng: 0 }\n};\n\nconst results = [];\nlet cacheHits = 0;\nlet needsApi = 0;\n\nfor (const item of $input.all()) {\n  const json = item.json;\n  const location = json.llm_location || 'Unknown';\n  let coords = null;\n  let method = 'none';\n  \n  console.log(`Geocoding: \"${location}\"`);\n  \n  // 1. Check exact cache match\n  if (locationCache[location]) {\n    coords = locationCache[location];\n    method = 'cache-exact';\n    cacheHits++;\n    console.log(`  ✓ Cache hit: [${coords.lat}, ${coords.lng}]`);\n  }\n  // 2. Try partial match\n  else {\n    for (const [country, countryCoords] of Object.entries(locationCache)) {\n      if (country !== 'Unknown' && location.toLowerCase().includes(country.toLowerCase())) {\n        coords = countryCoords;\n        method = 'cache-partial';\n        cacheHits++;\n        console.log(`  ✓ Cache partial (${country}): [${coords.lat}, ${coords.lng}]`);\n        break;\n      }\n    }\n  }\n  \n  // 3. Mark for API call if needed\n  if (!coords && location !== 'Unknown') {\n    needsApi++;\n    method = 'needs-api';\n    coords = { lat: 0, lng: 0 }; // Temporary\n    console.log(`  → Needs API call`);\n  } else if (!coords) {\n    coords = { lat: 0, lng: 0 };\n    method = 'fallback';\n  }\n  \n  results.push({\n    json: {\n      ...json,\n      lat: coords.lat,\n      lng: coords.lng,\n      geocode_method: method\n    }\n  });\n}\n\nconsole.log(`Cache hits: ${cacheHits}, Need API: ${needsApi}, Total: ${results.length}`);\nreturn results;"
      },
      "id": "cd7b756c-dc1f-4ec4-9e4a-08efdfcfbd17",
      "name": "Geocode Location2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6928,
        17088
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final data assembly\nconst results = [];\n\nfor (const item of $input.all()) {\n  const json = item.json;\n  \n  // Debug: log what we're receiving\n  console.log('Processing item:', JSON.stringify(json).substring(0, 200));\n  \n  results.push({\n    json: {\n      uniqueId: json.uniqueId || 'missing',\n      titleHash: json.titleHash || 'missing',\n      title: json.title || 'Untitled',\n      description: json.description || '',\n      link: json.link || '',\n      source: json.source || 'Unknown',\n      category: json.category || 'other',\n      pubDate: json.pubDate ? new Date(json.pubDate) : new Date(),\n      location: json.llm_location || 'Unknown',\n      lat: parseFloat(json.lat) || 0,\n      lng: parseFloat(json.lng) || 0,\n      confidence: json.llm_confidence || 'low',\n      loc: {\n        type: 'Point',\n        coordinates: [parseFloat(json.lng) || 0, parseFloat(json.lat) || 0]\n      },\n      createdAt: json.createdAt ? new Date(json.createdAt) : new Date(),\n      lastSeenAt: new Date()\n    }\n  });\n}\n\nconsole.log('Total items assembled:', results.length);\nreturn results;"
      },
      "id": "a6c8dbe4-7cb1-4685-9512-0648c2b41daa",
      "name": "Combine All Data2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7152,
        17088
      ]
    },
    {
      "parameters": {
        "jsCode": "// Pass all data through unchanged\nreturn $input.all();"
      },
      "id": "f7e21582-4ec0-4f70-a87f-c08b92f9bbd8",
      "name": "Pass Through3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7376,
        17088
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "crises",
        "fields": "uniqueId,titleHash,title,description,link,source,category,pubDate,location,lat,lng,loc,confidence,createdAt,lastSeenAt",
        "options": {}
      },
      "id": "0e3aa8af-d2db-4cbd-b86c-f541451d5c3c",
      "name": "Insert to MongoDB3",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        7600,
        17088
      ],
      "credentials": {
        "mongoDb": {
          "id": "OvssF2rTeIxQsjdB",
          "name": "MongoDB account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst successCount = items.filter(i => i.json.insertedId || i.json._id).length;\nconst errorCount = items.filter(i => i.json.error).length;\nconst totalProcessed = items.length;\n\n// Log sample for debugging\nif (items.length > 0) {\n  console.log('Sample result:', JSON.stringify(items[0].json));\n}\n\nconsole.log(`\\n===== WORKFLOW SUMMARY =====`);\nconsole.log(`Total processed: ${totalProcessed}`);\nconsole.log(`Successfully inserted: ${successCount}`);\nconsole.log(`Errors/Duplicates: ${errorCount}`);\nconsole.log(`===========================\\n`);\n\nreturn [{\n  json: {\n    timestamp: new Date(),\n    totalProcessed: totalProcessed,\n    successfulInserts: successCount,\n    errors: errorCount,\n    status: successCount > 0 ? 'success' : 'no_new_data'\n  }\n}];"
      },
      "id": "2486034d-57de-4d7e-986b-2940b654c8b7",
      "name": "Log Results2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7824,
        17088
      ]
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5408,
        18192
      ],
      "id": "7f415631-339c-4812-a6b7-64409a743966",
      "name": "Wait1",
      "webhookId": "848cce1d-26de-47e7-b4ad-d225024bd209"
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5200,
        17520
      ],
      "id": "73b876d3-c935-4029-a4da-bdf7f6baa0b2",
      "name": "Wait2",
      "webhookId": "848cce1d-26de-47e7-b4ad-d225024bd209"
    }
  ],
  "connections": {
    "Merge LLM Data": {
      "main": [
        [
          {
            "node": "Parse LLM Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every 3 Minutes2": {
      "main": [
        [
          {
            "node": "RSS BBC2",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS Al Jazeera2",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS CNN2",
            "type": "main",
            "index": 0
          },
          {
            "node": "USGS Earthquakes2",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS ReliefWeb2",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS CNBC Finance2",
            "type": "main",
            "index": 0
          },
          {
            "node": "NOAA Weather2",
            "type": "main",
            "index": 0
          },
          {
            "node": "UN OCHA2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google News Crisis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS BBC2": {
      "main": [
        [
          {
            "node": "Filter & Categorize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Al Jazeera2": {
      "main": [
        [
          {
            "node": "Filter & Categorize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS CNN2": {
      "main": [
        [
          {
            "node": "Filter & Categorize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USGS Earthquakes2": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS ReliefWeb2": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS CNBC Finance2": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NOAA Weather2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UN OCHA2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google News Crisis2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Categorize2": {
      "main": [
        [
          {
            "node": "Add Unique ID2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Unique ID2": {
      "main": [
        [
          {
            "node": "Prepare LLM Prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare LLM Prompt1": {
      "main": [
        [
          {
            "node": "Call Groq API1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge LLM Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Groq API1": {
      "main": [
        [
          {
            "node": "Merge LLM Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Parse LLM Response1": {
      "main": [
        [
          {
            "node": "Geocode Location2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Geocode Location2": {
      "main": [
        [
          {
            "node": "Combine All Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine All Data2": {
      "main": [
        [
          {
            "node": "Pass Through3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Through3": {
      "main": [
        [
          {
            "node": "Insert to MongoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert to MongoDB3": {
      "main": [
        [
          {
            "node": "Log Results2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Filter & Categorize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Filter & Categorize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a534c0d9f79baccd896ee4a8dc0d399aeb7ac4810aacc5b5d219c33331b5f4a5"
  }
}